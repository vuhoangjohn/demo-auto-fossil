Question 1:
	Toyota Car runs: 
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	BMW Car runs: 
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200


Question 2:
	Output 1:
	Max Speed: 200
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 200
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200

	Output 2:
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 100
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	Max Speed: 200
	
Question 3:
- Because threads run parallely in Java. 
- To make sure the order of 2 is same with 1, we have to use "Thread join" command for each Thread to stop others. Other threads run when this thread finishes


Question 4:
- You can't do this. Synchronize in Java is used to control multiple Threads executing on a same object. 
- When thread_1 is created and starts, it calls to run method. Then use run method to print "speed" in 10 times. 
When thread_1 finished, thread_2 can access to run method to print value.
Therefore, you can't use synchronize of Java to get that result.
P/s: you can use Interleaving in Java




